// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Praktika;

#nullable disable

namespace Praktika.Migrations
{
    [DbContext(typeof(PraktikaContext))]
    [Migration("20240716212816_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Praktika.Models.DiscontCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Discont")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DiscontCards");
                });

            modelBuilder.Entity("Praktika.Models.InOutProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("InOutProducts");
                });

            modelBuilder.Entity("Praktika.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderListId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("OrderPrice")
                        .HasColumnType("REAL");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderListId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Praktika.Models.OrderList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("OrderListPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OrderLists");
                });

            modelBuilder.Entity("Praktika.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductCoreId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductCoreId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Praktika.Models.ProductCore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColorOptions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SizeOptions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductCores");
                });

            modelBuilder.Entity("Praktika.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ДатаРождения")
                        .HasColumnType("TEXT");

                    b.Property<string>("Телефон")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Фио")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Praktika.Models.DiscontCard", b =>
                {
                    b.HasOne("Praktika.Models.User", "User")
                        .WithMany("DiscontCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Praktika.Models.InOutProduct", b =>
                {
                    b.HasOne("Praktika.Models.Product", "Product")
                        .WithMany("InOutProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Praktika.Models.Order", b =>
                {
                    b.HasOne("Praktika.Models.OrderList", null)
                        .WithMany("Orders")
                        .HasForeignKey("OrderListId");

                    b.HasOne("Praktika.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Praktika.Models.OrderList", b =>
                {
                    b.HasOne("Praktika.Models.User", "User")
                        .WithMany("OrderLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Praktika.Models.Product", b =>
                {
                    b.HasOne("Praktika.Models.ProductCore", "ProductCore")
                        .WithMany("Products")
                        .HasForeignKey("ProductCoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCore");
                });

            modelBuilder.Entity("Praktika.Models.OrderList", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Praktika.Models.Product", b =>
                {
                    b.Navigation("InOutProducts");
                });

            modelBuilder.Entity("Praktika.Models.ProductCore", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Praktika.Models.User", b =>
                {
                    b.Navigation("DiscontCards");

                    b.Navigation("OrderLists");
                });
#pragma warning restore 612, 618
        }
    }
}
